# Generated by Django 4.2.7 on 2025-10-23 11:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('leads', '0017_make_postal_code_required'),
    ]

    operations = [
        migrations.CreateModel(
            name='FieldSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether this object has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='When this object was soft deleted', null=True)),
                ('deletion_reason', models.TextField(blank=True, help_text='Reason for deletion', null=True)),
                ('customer_name', models.CharField(help_text='Customer full name', max_length=255)),
                ('phone', models.CharField(help_text='Customer phone number', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Customer email address', max_length=254, null=True)),
                ('address', models.TextField(help_text='Property address')),
                ('city', models.CharField(blank=True, help_text='City', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=20)),
                ('property_type', models.CharField(blank=True, choices=[('detached', 'Detached House'), ('semi-detached', 'Semi-Detached House'), ('terraced', 'Terraced House'), ('flat', 'Flat/Apartment'), ('bungalow', 'Bungalow')], help_text='Type of property', max_length=20)),
                ('roof_type', models.CharField(blank=True, choices=[('tiled', 'Tiled'), ('slate', 'Slate'), ('metal', 'Metal'), ('flat', 'Flat'), ('thatched', 'Thatched')], help_text='Type of roof', max_length=20)),
                ('roof_condition', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], help_text='Condition of roof', max_length=20)),
                ('roof_age', models.CharField(blank=True, help_text='Age of roof', max_length=20)),
                ('current_energy_supplier', models.CharField(blank=True, help_text='Current energy supplier', max_length=100)),
                ('monthly_bill', models.CharField(blank=True, help_text='Monthly energy bill', max_length=50)),
                ('heating_type', models.CharField(blank=True, choices=[('gas', 'Gas'), ('electric', 'Electric'), ('oil', 'Oil'), ('lpg', 'LPG'), ('heat-pump', 'Heat Pump')], help_text='Type of heating system', max_length=20)),
                ('hot_water_type', models.CharField(blank=True, choices=[('gas', 'Gas'), ('electric', 'Electric'), ('oil', 'Oil'), ('solar', 'Solar')], help_text='Type of hot water system', max_length=20)),
                ('insulation_type', models.CharField(blank=True, help_text='Type of insulation', max_length=100)),
                ('windows_type', models.CharField(blank=True, help_text='Type of windows', max_length=100)),
                ('property_age', models.CharField(blank=True, help_text='Age of property', max_length=50)),
                ('occupancy', models.CharField(blank=True, help_text='Occupancy status', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('photos', models.JSONField(default=list, help_text='Base64 encoded photos')),
                ('signature', models.TextField(blank=True, help_text='Base64 encoded customer signature')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', help_text='Current status of the submission', max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the assessment was conducted')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the submission was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Qualifier review notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this object', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('field_agent', models.ForeignKey(help_text='Field agent who conducted the assessment', on_delete=django.db.models.deletion.CASCADE, related_name='field_submissions', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Qualifier who reviewed the submission', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Field Submission',
                'verbose_name_plural': 'Field Submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='lead',
            name='field_submission',
            field=models.OneToOneField(blank=True, help_text='Field submission that created this lead', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead', to='leads.fieldsubmission'),
        ),
    ]
