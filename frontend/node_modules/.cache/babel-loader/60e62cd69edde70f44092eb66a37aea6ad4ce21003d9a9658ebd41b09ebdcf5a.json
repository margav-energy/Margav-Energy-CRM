{"ast":null,"code":"var _jsxFileName = \"/Users/elarh/Desktop/Margav Energy CRM/frontend/src/components/KanbanBoard.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { leadsAPI } from '../api';\nimport { toast } from 'react-toastify';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay } from '@dnd-kit/core';\nimport { SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableLeadCard = ({\n  lead,\n  getStatusBadgeColor,\n  getStatusDisplayName,\n  formatDate\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: lead.id.toString()\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    className: \"bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-grab active:cursor-grabbing\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-start justify-between mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-medium text-gray-900 text-sm\",\n        children: lead.full_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusBadgeColor(lead.status)}`,\n        children: getStatusDisplayName(lead.status)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-1 text-xs text-gray-600\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDCDE \", lead.phone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), lead.email && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDCE7 \", lead.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 24\n      }, this), lead.appointment_date && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDCC5 \", formatDate(lead.appointment_date)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), lead.sale_amount && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold text-green-600\",\n        children: [\"\\uD83D\\uDCB0 $\", lead.sale_amount.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), lead.notes && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xs text-gray-500 mt-2 line-clamp-2\",\n      children: lead.notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 text-xs text-gray-400\",\n      children: [\"Assigned to: \", lead.assigned_agent_name || lead.assigned_agent_username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(SortableLeadCard, \"iTIyvp0X9kMGpdHRsWsr2+tGbVI=\", false, function () {\n  return [useSortable];\n});\n_c = SortableLeadCard;\nconst KanbanBoard = ({\n  userRole\n}) => {\n  _s2();\n  var _columns$flatMap$find;\n  const [columns, setColumns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeId, setActiveId] = useState(null);\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  useEffect(() => {\n    fetchLeads();\n  }, [userRole]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchLeads = async () => {\n    try {\n      setLoading(true);\n      const response = await leadsAPI.getLeads();\n      const leads = response.results;\n\n      // Define columns based on user role\n      let columnDefinitions = [];\n      if (userRole === 'admin') {\n        columnDefinitions = [{\n          id: 'cold_call',\n          title: 'Cold Calls',\n          statuses: ['cold_call'],\n          color: 'bg-gray-100'\n        }, {\n          id: 'interested',\n          title: 'Interested',\n          statuses: ['sent_to_kelly'],\n          color: 'bg-blue-100'\n        }, {\n          id: 'qualified',\n          title: 'Qualified',\n          statuses: ['qualified'],\n          color: 'bg-green-100'\n        }, {\n          id: 'appointments',\n          title: 'Appointments',\n          statuses: ['appointment_set'],\n          color: 'bg-purple-100'\n        }, {\n          id: 'completed',\n          title: 'Completed',\n          statuses: ['appointment_completed'],\n          color: 'bg-yellow-100'\n        }, {\n          id: 'sales',\n          title: 'Sales',\n          statuses: ['sale_made', 'sale_lost'],\n          color: 'bg-indigo-100'\n        }];\n      } else if (userRole === 'agent') {\n        columnDefinitions = [{\n          id: 'cold_call',\n          title: 'Cold Calls',\n          statuses: ['cold_call'],\n          color: 'bg-gray-100'\n        }, {\n          id: 'interested',\n          title: 'Interested',\n          statuses: ['interested'],\n          color: 'bg-blue-100'\n        }, {\n          id: 'sent_to_kelly',\n          title: 'Sent to Kelly',\n          statuses: ['sent_to_kelly'],\n          color: 'bg-green-100'\n        }, {\n          id: 'not_interested',\n          title: 'Not Interested',\n          statuses: ['not_interested', 'tenant', 'other_disposition'],\n          color: 'bg-red-100'\n        }];\n      } else if (userRole === 'qualifier') {\n        columnDefinitions = [{\n          id: 'sent_to_kelly',\n          title: 'To Qualify',\n          statuses: ['sent_to_kelly'],\n          color: 'bg-blue-100'\n        }, {\n          id: 'qualified',\n          title: 'Qualified',\n          statuses: ['qualified'],\n          color: 'bg-green-100'\n        }, {\n          id: 'appointments',\n          title: 'Appointments Set',\n          statuses: ['appointment_set'],\n          color: 'bg-purple-100'\n        }, {\n          id: 'not_qualified',\n          title: 'Not Qualified',\n          statuses: ['not_interested', 'no_contact', 'blow_out', 'callback', 'pass_back_to_agent'],\n          color: 'bg-red-100'\n        }];\n      } else if (userRole === 'salesrep') {\n        columnDefinitions = [{\n          id: 'appointments',\n          title: 'My Appointments',\n          statuses: ['appointment_set'],\n          color: 'bg-purple-100'\n        }, {\n          id: 'completed',\n          title: 'Completed',\n          statuses: ['appointment_completed'],\n          color: 'bg-yellow-100'\n        }, {\n          id: 'sales',\n          title: 'Sales Results',\n          statuses: ['sale_made', 'sale_lost'],\n          color: 'bg-indigo-100'\n        }];\n      }\n\n      // Populate columns with leads\n      const populatedColumns = columnDefinitions.map(column => ({\n        ...column,\n        leads: leads.filter(lead => column.statuses.includes(lead.status))\n      }));\n      setColumns(populatedColumns);\n    } catch (error) {\n      console.error('Failed to fetch leads:', error);\n      toast.error('Failed to fetch leads');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getStatusBadgeColor = status => {\n    const colors = {\n      'cold_call': 'bg-gray-100 text-gray-800',\n      'interested': 'bg-blue-100 text-blue-800',\n      'sent_to_kelly': 'bg-green-100 text-green-800',\n      'qualified': 'bg-green-100 text-green-800',\n      'appointment_set': 'bg-purple-100 text-purple-800',\n      'appointment_completed': 'bg-yellow-100 text-yellow-800',\n      'sale_made': 'bg-green-100 text-green-800',\n      'sale_lost': 'bg-red-100 text-red-800',\n      'not_interested': 'bg-red-100 text-red-800',\n      'tenant': 'bg-orange-100 text-orange-800',\n      'other_disposition': 'bg-gray-100 text-gray-800',\n      'no_contact': 'bg-gray-100 text-gray-800',\n      'blow_out': 'bg-red-100 text-red-800',\n      'callback': 'bg-yellow-100 text-yellow-800',\n      'pass_back_to_agent': 'bg-blue-100 text-blue-800'\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  };\n  const getStatusDisplayName = status => {\n    const names = {\n      'cold_call': 'Cold Call',\n      'interested': 'Interested',\n      'sent_to_kelly': 'Sent to Kelly',\n      'qualified': 'Qualified',\n      'appointment_set': 'Appointment Set',\n      'appointment_completed': 'Completed',\n      'sale_made': 'Sale Made',\n      'sale_lost': 'Sale Lost',\n      'not_interested': 'Not Interested',\n      'tenant': 'Tenant',\n      'other_disposition': 'Other',\n      'no_contact': 'No Contact',\n      'blow_out': 'Blow Out',\n      'callback': 'Call Back',\n      'pass_back_to_agent': 'Pass Back'\n    };\n    return names[status] || status;\n  };\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const handleDragStart = event => {\n    setActiveId(event.active.id);\n  };\n  const handleDragEnd = async event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (!over) return;\n    const activeId = active.id;\n    const overId = over.id;\n\n    // Find the source column and lead\n    let sourceColumn = null;\n    let sourceLead = null;\n    let sourceIndex = -1;\n    for (const column of columns) {\n      const leadIndex = column.leads.findIndex(lead => lead.id.toString() === activeId);\n      if (leadIndex !== -1) {\n        sourceColumn = column;\n        sourceLead = column.leads[leadIndex];\n        sourceIndex = leadIndex;\n        break;\n      }\n    }\n    if (!sourceColumn || !sourceLead) return;\n\n    // Find the target column\n    let targetColumn = null;\n    for (const column of columns) {\n      if (column.id === overId || column.leads.some(lead => lead.id.toString() === overId)) {\n        targetColumn = column;\n        break;\n      }\n    }\n    if (!targetColumn || sourceColumn.id === targetColumn.id) return;\n\n    // Determine new status based on target column\n    let newStatus = sourceLead.status;\n    if (targetColumn.statuses.length > 0) {\n      newStatus = targetColumn.statuses[0];\n    }\n\n    // Update the lead status in the backend\n    try {\n      let updatedLead;\n\n      // Use different API endpoints based on user role\n      if (userRole === 'qualifier' && sourceLead.status === 'sent_to_kelly') {\n        // For qualifiers, use the qualify endpoint\n        updatedLead = await leadsAPI.qualifyLead(sourceLead.id, {\n          status: newStatus\n        });\n      } else {\n        // For other roles, use the regular update endpoint\n        updatedLead = await leadsAPI.updateLead(sourceLead.id, {\n          status: newStatus\n        });\n      }\n\n      // Update local state\n      setColumns(prevColumns => {\n        const newColumns = [...prevColumns];\n\n        // Remove from source column\n        const sourceColIndex = newColumns.findIndex(col => col.id === sourceColumn.id);\n        newColumns[sourceColIndex] = {\n          ...newColumns[sourceColIndex],\n          leads: newColumns[sourceColIndex].leads.filter(lead => lead.id.toString() !== activeId)\n        };\n\n        // Add to target column\n        const targetColIndex = newColumns.findIndex(col => col.id === targetColumn.id);\n        const leadToAdd = updatedLead || {\n          ...sourceLead,\n          status: newStatus\n        };\n        newColumns[targetColIndex] = {\n          ...newColumns[targetColIndex],\n          leads: [...newColumns[targetColIndex].leads, leadToAdd]\n        };\n        return newColumns;\n      });\n      toast.success(`Lead moved to ${targetColumn.title}`);\n    } catch (error) {\n      console.error('Failed to update lead status:', error);\n      toast.error('Failed to update lead status');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\",\n        children: \"Lead Pipeline - Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchLeads,\n        className: \"btn-margav-secondary\",\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-3 min-w-max pb-4\",\n          children: columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-shrink-0 w-64 lg:w-72\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${column.color} rounded-lg p-4 h-full min-h-[500px]`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-between mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-900 text-sm lg:text-base\",\n                  children: column.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"bg-white bg-opacity-50 text-gray-700 px-2 py-1 rounded-full text-xs font-medium\",\n                  children: column.leads.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n                items: column.leads.map(lead => lead.id.toString()),\n                strategy: verticalListSortingStrategy,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"space-y-2 max-h-[calc(100vh-400px)] overflow-y-auto\",\n                  children: column.leads.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center py-6 text-gray-500\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-3xl mb-2\",\n                      children: \"\\uD83D\\uDCCB\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-xs\",\n                      children: \"No leads\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 363,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 25\n                  }, this) : column.leads.map(lead => /*#__PURE__*/_jsxDEV(SortableLeadCard, {\n                    lead: lead,\n                    getStatusBadgeColor: getStatusBadgeColor,\n                    getStatusDisplayName: getStatusDisplayName,\n                    formatDate: formatDate\n                  }, lead.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this)\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-lg p-4 shadow-lg border-2 border-green-500 opacity-90\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm font-medium text-gray-900\",\n            children: (_columns$flatMap$find = columns.flatMap(col => col.leads).find(lead => lead.id.toString() === activeId)) === null || _columns$flatMap$find === void 0 ? void 0 : _columns$flatMap$find.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n};\n_s2(KanbanBoard, \"hWOfGwTJ/RU/nIl4AyLzm6x+jWY=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c2 = KanbanBoard;\nexport default KanbanBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableLeadCard\");\n$RefreshReg$(_c2, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useEffect","leadsAPI","toast","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","SortableContext","sortableKeyboardCoordinates","verticalListSortingStrategy","useSortable","CSS","jsxDEV","_jsxDEV","SortableLeadCard","lead","getStatusBadgeColor","getStatusDisplayName","formatDate","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","id","toString","style","Transform","opacity","ref","className","children","full_name","fileName","_jsxFileName","lineNumber","columnNumber","status","phone","email","appointment_date","sale_amount","toLocaleString","notes","assigned_agent_name","assigned_agent_username","_c","KanbanBoard","userRole","_s2","_columns$flatMap$find","columns","setColumns","loading","setLoading","activeId","setActiveId","sensors","coordinateGetter","fetchLeads","response","getLeads","leads","results","columnDefinitions","title","statuses","color","populatedColumns","map","column","filter","includes","error","console","colors","names","dateString","Date","toLocaleDateString","month","day","hour","minute","handleDragStart","event","active","handleDragEnd","over","overId","sourceColumn","sourceLead","sourceIndex","leadIndex","findIndex","targetColumn","some","newStatus","length","updatedLead","qualifyLead","updateLead","prevColumns","newColumns","sourceColIndex","col","targetColIndex","leadToAdd","success","onClick","collisionDetection","onDragStart","onDragEnd","items","strategy","flatMap","find","_c2","$RefreshReg$"],"sources":["/Users/elarh/Desktop/Margav Energy CRM/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Lead } from '../types';\nimport { leadsAPI } from '../api';\nimport { toast } from 'react-toastify';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n  DragOverlay,\n  DragStartEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport {\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\ninterface KanbanBoardProps {\n  userRole: string;\n}\n\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  statuses: string[];\n  color: string;\n  leads: Lead[];\n}\n\ninterface SortableLeadCardProps {\n  lead: Lead;\n  getStatusBadgeColor: (status: string) => string;\n  getStatusDisplayName: (status: string) => string;\n  formatDate: (dateString: string) => string;\n}\n\nconst SortableLeadCard: React.FC<SortableLeadCardProps> = ({\n  lead,\n  getStatusBadgeColor,\n  getStatusDisplayName,\n  formatDate,\n}) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: lead.id.toString() });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className=\"bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-grab active:cursor-grabbing\"\n    >\n      <div className=\"flex items-start justify-between mb-2\">\n        <h4 className=\"font-medium text-gray-900 text-sm\">{lead.full_name}</h4>\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadgeColor(lead.status)}`}>\n          {getStatusDisplayName(lead.status)}\n        </span>\n      </div>\n      \n      <div className=\"space-y-1 text-xs text-gray-600\">\n        <p>📞 {lead.phone}</p>\n        {lead.email && <p>📧 {lead.email}</p>}\n        {lead.appointment_date && (\n          <p>📅 {formatDate(lead.appointment_date)}</p>\n        )}\n        {lead.sale_amount && (\n          <p className=\"font-semibold text-green-600\">💰 ${lead.sale_amount.toLocaleString()}</p>\n        )}\n      </div>\n      \n      {lead.notes && (\n        <p className=\"text-xs text-gray-500 mt-2 line-clamp-2\">{lead.notes}</p>\n      )}\n      \n      <div className=\"mt-2 text-xs text-gray-400\">\n        Assigned to: {lead.assigned_agent_name || lead.assigned_agent_username}\n      </div>\n    </div>\n  );\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ userRole }) => {\n  const [columns, setColumns] = useState<KanbanColumn[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  useEffect(() => {\n    fetchLeads();\n  }, [userRole]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchLeads = async () => {\n    try {\n      setLoading(true);\n      const response = await leadsAPI.getLeads();\n      const leads = response.results;\n      \n      // Define columns based on user role\n      let columnDefinitions: Omit<KanbanColumn, 'leads'>[] = [];\n      \n      if (userRole === 'admin') {\n        columnDefinitions = [\n          { id: 'cold_call', title: 'Cold Calls', statuses: ['cold_call'], color: 'bg-gray-100' },\n          { id: 'interested', title: 'Interested', statuses: ['sent_to_kelly'], color: 'bg-blue-100' },\n          { id: 'qualified', title: 'Qualified', statuses: ['qualified'], color: 'bg-green-100' },\n          { id: 'appointments', title: 'Appointments', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'completed', title: 'Completed', statuses: ['appointment_completed'], color: 'bg-yellow-100' },\n          { id: 'sales', title: 'Sales', statuses: ['sale_made', 'sale_lost'], color: 'bg-indigo-100' },\n        ];\n      } else if (userRole === 'agent') {\n        columnDefinitions = [\n          { id: 'cold_call', title: 'Cold Calls', statuses: ['cold_call'], color: 'bg-gray-100' },\n          { id: 'interested', title: 'Interested', statuses: ['interested'], color: 'bg-blue-100' },\n          { id: 'sent_to_kelly', title: 'Sent to Kelly', statuses: ['sent_to_kelly'], color: 'bg-green-100' },\n          { id: 'not_interested', title: 'Not Interested', statuses: ['not_interested', 'tenant', 'other_disposition'], color: 'bg-red-100' },\n        ];\n      } else if (userRole === 'qualifier') {\n        columnDefinitions = [\n          { id: 'sent_to_kelly', title: 'To Qualify', statuses: ['sent_to_kelly'], color: 'bg-blue-100' },\n          { id: 'qualified', title: 'Qualified', statuses: ['qualified'], color: 'bg-green-100' },\n          { id: 'appointments', title: 'Appointments Set', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'not_qualified', title: 'Not Qualified', statuses: ['not_interested', 'no_contact', 'blow_out', 'callback', 'pass_back_to_agent'], color: 'bg-red-100' },\n        ];\n      } else if (userRole === 'salesrep') {\n        columnDefinitions = [\n          { id: 'appointments', title: 'My Appointments', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'completed', title: 'Completed', statuses: ['appointment_completed'], color: 'bg-yellow-100' },\n          { id: 'sales', title: 'Sales Results', statuses: ['sale_made', 'sale_lost'], color: 'bg-indigo-100' },\n        ];\n      }\n\n      // Populate columns with leads\n      const populatedColumns = columnDefinitions.map(column => ({\n        ...column,\n        leads: leads.filter(lead => column.statuses.includes(lead.status))\n      }));\n\n      setColumns(populatedColumns);\n    } catch (error) {\n      console.error('Failed to fetch leads:', error);\n      toast.error('Failed to fetch leads');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    const colors: { [key: string]: string } = {\n      'cold_call': 'bg-gray-100 text-gray-800',\n      'interested': 'bg-blue-100 text-blue-800',\n      'sent_to_kelly': 'bg-green-100 text-green-800',\n      'qualified': 'bg-green-100 text-green-800',\n      'appointment_set': 'bg-purple-100 text-purple-800',\n      'appointment_completed': 'bg-yellow-100 text-yellow-800',\n      'sale_made': 'bg-green-100 text-green-800',\n      'sale_lost': 'bg-red-100 text-red-800',\n      'not_interested': 'bg-red-100 text-red-800',\n      'tenant': 'bg-orange-100 text-orange-800',\n      'other_disposition': 'bg-gray-100 text-gray-800',\n      'no_contact': 'bg-gray-100 text-gray-800',\n      'blow_out': 'bg-red-100 text-red-800',\n      'callback': 'bg-yellow-100 text-yellow-800',\n      'pass_back_to_agent': 'bg-blue-100 text-blue-800',\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusDisplayName = (status: string) => {\n    const names: { [key: string]: string } = {\n      'cold_call': 'Cold Call',\n      'interested': 'Interested',\n      'sent_to_kelly': 'Sent to Kelly',\n      'qualified': 'Qualified',\n      'appointment_set': 'Appointment Set',\n      'appointment_completed': 'Completed',\n      'sale_made': 'Sale Made',\n      'sale_lost': 'Sale Lost',\n      'not_interested': 'Not Interested',\n      'tenant': 'Tenant',\n      'other_disposition': 'Other',\n      'no_contact': 'No Contact',\n      'blow_out': 'Blow Out',\n      'callback': 'Call Back',\n      'pass_back_to_agent': 'Pass Back',\n    };\n    return names[status] || status;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const handleDragStart = (event: DragStartEvent) => {\n    setActiveId(event.active.id as string);\n  };\n\n  const handleDragEnd = async (event: DragEndEvent) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over) return;\n\n    const activeId = active.id as string;\n    const overId = over.id as string;\n\n    // Find the source column and lead\n    let sourceColumn: KanbanColumn | null = null;\n    let sourceLead: Lead | null = null;\n    let sourceIndex = -1;\n\n    for (const column of columns) {\n      const leadIndex = column.leads.findIndex(lead => lead.id.toString() === activeId);\n      if (leadIndex !== -1) {\n        sourceColumn = column;\n        sourceLead = column.leads[leadIndex];\n        sourceIndex = leadIndex;\n        break;\n      }\n    }\n\n    if (!sourceColumn || !sourceLead) return;\n\n    // Find the target column\n    let targetColumn: KanbanColumn | null = null;\n    for (const column of columns) {\n      if (column.id === overId || column.leads.some(lead => lead.id.toString() === overId)) {\n        targetColumn = column;\n        break;\n      }\n    }\n\n    if (!targetColumn || sourceColumn.id === targetColumn.id) return;\n\n    // Determine new status based on target column\n    let newStatus = sourceLead.status;\n    if (targetColumn.statuses.length > 0) {\n      newStatus = targetColumn.statuses[0] as Lead['status'];\n    }\n\n    // Update the lead status in the backend\n    try {\n      let updatedLead;\n      \n      // Use different API endpoints based on user role\n      if (userRole === 'qualifier' && sourceLead.status === 'sent_to_kelly') {\n        // For qualifiers, use the qualify endpoint\n        updatedLead = await leadsAPI.qualifyLead(sourceLead.id, { status: newStatus });\n      } else {\n        // For other roles, use the regular update endpoint\n        updatedLead = await leadsAPI.updateLead(sourceLead.id, { status: newStatus });\n      }\n      \n      // Update local state\n      setColumns(prevColumns => {\n        const newColumns = [...prevColumns];\n        \n        // Remove from source column\n        const sourceColIndex = newColumns.findIndex(col => col.id === sourceColumn!.id);\n        newColumns[sourceColIndex] = {\n          ...newColumns[sourceColIndex],\n          leads: newColumns[sourceColIndex].leads.filter(lead => lead.id.toString() !== activeId)\n        };\n        \n        // Add to target column\n        const targetColIndex = newColumns.findIndex(col => col.id === targetColumn!.id);\n        const leadToAdd = updatedLead || { ...sourceLead!, status: newStatus };\n        newColumns[targetColIndex] = {\n          ...newColumns[targetColIndex],\n          leads: [...newColumns[targetColIndex].leads, leadToAdd]\n        };\n        \n        return newColumns;\n      });\n\n      toast.success(`Lead moved to ${targetColumn.title}`);\n    } catch (error) {\n      console.error('Failed to update lead status:', error);\n      toast.error('Failed to update lead status');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          Lead Pipeline - Kanban Board\n        </h2>\n        <button\n          onClick={fetchLeads}\n          className=\"btn-margav-secondary\"\n        >\n          Refresh\n        </button>\n      </div>\n\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <div className=\"overflow-x-auto\">\n          <div className=\"flex space-x-3 min-w-max pb-4\">\n            {columns.map((column) => (\n              <div key={column.id} className=\"flex-shrink-0 w-64 lg:w-72\">\n                <div className={`${column.color} rounded-lg p-4 h-full min-h-[500px]`}>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-gray-900 text-sm lg:text-base\">{column.title}</h3>\n                    <span className=\"bg-white bg-opacity-50 text-gray-700 px-2 py-1 rounded-full text-xs font-medium\">\n                      {column.leads.length}\n                    </span>\n                  </div>\n                  \n                  <SortableContext\n                    items={column.leads.map(lead => lead.id.toString())}\n                    strategy={verticalListSortingStrategy}\n                  >\n                    <div className=\"space-y-2 max-h-[calc(100vh-400px)] overflow-y-auto\">\n                      {column.leads.length === 0 ? (\n                        <div className=\"text-center py-6 text-gray-500\">\n                          <div className=\"text-3xl mb-2\">📋</div>\n                          <p className=\"text-xs\">No leads</p>\n                        </div>\n                      ) : (\n                        column.leads.map((lead) => (\n                          <SortableLeadCard\n                            key={lead.id}\n                            lead={lead}\n                            getStatusBadgeColor={getStatusBadgeColor}\n                            getStatusDisplayName={getStatusDisplayName}\n                            formatDate={formatDate}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </SortableContext>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <DragOverlay>\n          {activeId ? (\n            <div className=\"bg-white rounded-lg p-4 shadow-lg border-2 border-green-500 opacity-90\">\n              <div className=\"text-sm font-medium text-gray-900\">\n                {columns.flatMap(col => col.leads).find(lead => lead.id.toString() === activeId)?.full_name}\n              </div>\n            </div>\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}