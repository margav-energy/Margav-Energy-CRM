{"ast":null,"code":"import axios from 'axios';\n// Base API configuration\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Token management\nlet authToken = localStorage.getItem('authToken');\nexport const setAuthToken = token => {\n  authToken = token;\n  if (token) {\n    localStorage.setItem('authToken', token);\n    api.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    localStorage.removeItem('authToken');\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize token on app start\nif (authToken) {\n  api.defaults.headers.common['Authorization'] = `Token ${authToken}`;\n}\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  if (authToken) {\n    config.headers.Authorization = `Token ${authToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    setAuthToken(null);\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/api-token-auth/', credentials);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me/');\n    return response.data;\n  },\n  logout: () => {\n    setAuthToken(null);\n  }\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: async () => {\n    const response = await api.get('/users/');\n    return response.data;\n  },\n  getUser: async id => {\n    const response = await api.get(`/users/${id}/`);\n    return response.data;\n  }\n};\n\n// Leads API\nexport const leadsAPI = {\n  getLeads: async params => {\n    const response = await api.get('/leads/', {\n      params\n    });\n    return response.data;\n  },\n  getLead: async id => {\n    const response = await api.get(`/leads/${id}/`);\n    return response.data;\n  },\n  createLead: async leadData => {\n    const response = await api.post('/leads/', leadData);\n    return response.data;\n  },\n  updateLead: async (id, leadData) => {\n    const response = await api.patch(`/leads/${id}/`, leadData);\n    return response.data;\n  },\n  deleteLead: async id => {\n    await api.delete(`/leads/${id}/`);\n  },\n  getMyLeads: async () => {\n    const response = await api.get('/leads/my/');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","authToken","localStorage","getItem","setAuthToken","token","setItem","defaults","common","removeItem","interceptors","request","use","config","Authorization","error","Promise","reject","response","_error$response","status","window","location","href","authAPI","login","credentials","post","data","getCurrentUser","get","logout","usersAPI","getUsers","getUser","id","leadsAPI","getLeads","params","getLead","createLead","leadData","updateLead","patch","deleteLead","delete","getMyLeads"],"sources":["/Users/elarh/Desktop/Margav Energy CRM/frontend/src/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { AuthResponse, User, Lead, Dialer, ApiResponse, LoginForm, LeadForm, LeadUpdateForm, LeadDispositionForm } from './types';\n\n// Base API configuration\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Token management\nlet authToken: string | null = localStorage.getItem('authToken');\n\nexport const setAuthToken = (token: string | null) => {\n  authToken = token;\n  if (token) {\n    localStorage.setItem('authToken', token);\n    api.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    localStorage.removeItem('authToken');\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize token on app start\nif (authToken) {\n  api.defaults.headers.common['Authorization'] = `Token ${authToken}`;\n}\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    if (authToken) {\n      config.headers.Authorization = `Token ${authToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      setAuthToken(null);\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials: LoginForm): Promise<AuthResponse> => {\n    const response: AxiosResponse<AuthResponse> = await api.post('/api-token-auth/', credentials);\n    return response.data;\n  },\n\n  getCurrentUser: async (): Promise<User> => {\n    const response: AxiosResponse<User> = await api.get('/users/me/');\n    return response.data;\n  },\n\n  logout: () => {\n    setAuthToken(null);\n  },\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: async (): Promise<ApiResponse<User>> => {\n    const response: AxiosResponse<ApiResponse<User>> = await api.get('/users/');\n    return response.data;\n  },\n\n  getUser: async (id: number): Promise<User> => {\n    const response: AxiosResponse<User> = await api.get(`/users/${id}/`);\n    return response.data;\n  },\n};\n\n// Leads API\nexport const leadsAPI = {\n  getLeads: async (params?: {\n    status?: string;\n    assigned_agent?: number;\n    search?: string;\n    ordering?: string;\n  }): Promise<ApiResponse<Lead>> => {\n    const response: AxiosResponse<ApiResponse<Lead>> = await api.get('/leads/', { params });\n    return response.data;\n  },\n\n  getLead: async (id: number): Promise<Lead> => {\n    const response: AxiosResponse<Lead> = await api.get(`/leads/${id}/`);\n    return response.data;\n  },\n\n  createLead: async (leadData: LeadForm): Promise<Lead> => {\n    const response: AxiosResponse<Lead> = await api.post('/leads/', leadData);\n    return response.data;\n  },\n\n  updateLead: async (id: number, leadData: LeadUpdateForm): Promise<Lead> => {\n    const response: AxiosResponse<Lead> = await api.patch(`/leads/${id}/`, leadData);\n    return response.data;\n  },\n\n  deleteLead: async (id: number): Promise<void> => {\n    await api.delete(`/leads/${id}/`);\n  },\n\n  getMyLeads: async (): Promise<ApiResponse<Lead>> => {\n    const response: AxiosResponse<ApiResponse<Lead>> = await api.get('/leads/my/');\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}