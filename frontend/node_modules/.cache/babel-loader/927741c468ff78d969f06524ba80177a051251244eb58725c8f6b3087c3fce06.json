{"ast":null,"code":"import _objectSpread from\"/Users/elarh/Desktop/Margav Energy CRM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{leadsAPI}from'../api';import{toast}from'react-toastify';import{DndContext,closestCenter,KeyboardSensor,PointerSensor,useSensor,useSensors,DragOverlay}from'@dnd-kit/core';import{SortableContext,sortableKeyboardCoordinates,verticalListSortingStrategy}from'@dnd-kit/sortable';import{useSortable}from'@dnd-kit/sortable';import{CSS}from'@dnd-kit/utilities';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SortableLeadCard=_ref=>{var _lead$id;let{lead,getStatusBadgeColor,getStatusDisplayName,formatDate}=_ref;const{attributes,listeners,setNodeRef,transform,transition,isDragging}=useSortable({id:(lead===null||lead===void 0?void 0:(_lead$id=lead.id)===null||_lead$id===void 0?void 0:_lead$id.toString())||'invalid'});// Safety check for lead data\nif(!lead||typeof lead.id==='undefined'){console.warn('SortableLeadCard received invalid lead data:',lead);return null;}const style={transform:CSS.Transform.toString(transform),transition,opacity:isDragging?0.5:1};return/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread(_objectSpread({ref:setNodeRef,style:style},attributes),listeners),{},{className:\"bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-grab active:cursor-grabbing\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-start justify-between mb-2\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-medium text-gray-900 text-sm\",children:lead.full_name}),/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 rounded-full text-xs font-medium \".concat(getStatusBadgeColor(lead.status)),children:getStatusDisplayName(lead.status)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-1 text-xs text-gray-600\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83D\\uDCDE \",lead.phone]}),lead.email&&/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83D\\uDCE7 \",lead.email]}),lead.appointment_date&&/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83D\\uDCC5 \",formatDate(lead.appointment_date)]}),lead.sale_amount&&/*#__PURE__*/_jsxs(\"p\",{className:\"font-semibold text-green-600\",children:[\"\\uD83D\\uDCB0 $\",lead.sale_amount.toLocaleString()]})]}),lead.notes&&/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-gray-500 mt-2 line-clamp-2\",children:lead.notes}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 text-xs text-gray-400\",children:[\"Assigned to: \",lead.assigned_agent_name||lead.assigned_agent_username]})]}));};const KanbanBoard=_ref2=>{var _columns$flatMap$find;let{userRole}=_ref2;const[columns,setColumns]=useState([]);const[loading,setLoading]=useState(true);const[activeId,setActiveId]=useState(null);const sensors=useSensors(useSensor(PointerSensor),useSensor(KeyboardSensor,{coordinateGetter:sortableKeyboardCoordinates}));useEffect(()=>{fetchLeads();},[userRole]);// eslint-disable-line react-hooks/exhaustive-deps\nconst fetchLeads=async()=>{try{setLoading(true);const response=await leadsAPI.getLeads();const leads=response.results;// Define columns based on user role\nlet columnDefinitions=[];if(userRole==='admin'){columnDefinitions=[{id:'cold_call',title:'Cold Calls',statuses:['cold_call'],color:'bg-gray-100'},{id:'interested',title:'Interested',statuses:['sent_to_kelly'],color:'bg-blue-100'},{id:'qualified',title:'Qualified',statuses:['qualified'],color:'bg-green-100'},{id:'appointments',title:'Appointments',statuses:['appointment_set'],color:'bg-purple-100'},{id:'completed',title:'Completed',statuses:['appointment_completed'],color:'bg-yellow-100'},{id:'sales',title:'Sales',statuses:['sale_made','sale_lost'],color:'bg-indigo-100'}];}else if(userRole==='agent'){columnDefinitions=[{id:'cold_call',title:'Cold Calls',statuses:['cold_call'],color:'bg-gray-100'},{id:'interested',title:'Interested',statuses:['interested'],color:'bg-blue-100'},{id:'sent_to_kelly',title:'Sent to Kelly',statuses:['sent_to_kelly'],color:'bg-green-100'},{id:'not_interested',title:'Not Interested',statuses:['not_interested','tenant','other_disposition'],color:'bg-red-100'}];}else if(userRole==='qualifier'){columnDefinitions=[{id:'sent_to_kelly',title:'To Qualify',statuses:['sent_to_kelly'],color:'bg-blue-100'},{id:'qualified',title:'Qualified',statuses:['qualified'],color:'bg-green-100'},{id:'appointments',title:'Appointments Set',statuses:['appointment_set'],color:'bg-purple-100'},{id:'not_qualified',title:'Not Qualified',statuses:['not_interested','no_contact','blow_out','callback','pass_back_to_agent'],color:'bg-red-100'}];}else if(userRole==='salesrep'){columnDefinitions=[{id:'appointments',title:'My Appointments',statuses:['appointment_set'],color:'bg-purple-100'},{id:'completed',title:'Completed',statuses:['appointment_completed'],color:'bg-yellow-100'},{id:'sales',title:'Sales Results',statuses:['sale_made','sale_lost'],color:'bg-indigo-100'}];}// Populate columns with leads\nconst populatedColumns=columnDefinitions.map(column=>_objectSpread(_objectSpread({},column),{},{leads:leads.filter(lead=>column.statuses.includes(lead.status))}));setColumns(populatedColumns);}catch(error){console.error('Failed to fetch leads:',error);toast.error('Failed to fetch leads');}finally{setLoading(false);}};const getStatusBadgeColor=status=>{const colors={'cold_call':'bg-gray-100 text-gray-800','interested':'bg-blue-100 text-blue-800','sent_to_kelly':'bg-green-100 text-green-800','qualified':'bg-green-100 text-green-800','appointment_set':'bg-purple-100 text-purple-800','appointment_completed':'bg-yellow-100 text-yellow-800','sale_made':'bg-green-100 text-green-800','sale_lost':'bg-red-100 text-red-800','not_interested':'bg-red-100 text-red-800','tenant':'bg-orange-100 text-orange-800','other_disposition':'bg-gray-100 text-gray-800','no_contact':'bg-gray-100 text-gray-800','blow_out':'bg-red-100 text-red-800','callback':'bg-yellow-100 text-yellow-800','pass_back_to_agent':'bg-blue-100 text-blue-800'};return colors[status]||'bg-gray-100 text-gray-800';};const getStatusDisplayName=status=>{const names={'cold_call':'Cold Call','interested':'Interested','sent_to_kelly':'Sent to Kelly','qualified':'Qualified','appointment_set':'Appointment Set','appointment_completed':'Completed','sale_made':'Sale Made','sale_lost':'Sale Lost','not_interested':'Not Interested','tenant':'Tenant','other_disposition':'Other','no_contact':'No Contact','blow_out':'Blow Out','callback':'Call Back','pass_back_to_agent':'Pass Back'};return names[status]||status;};const formatDate=dateString=>{return new Date(dateString).toLocaleDateString('en-US',{month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'});};const handleDragStart=event=>{setActiveId(event.active.id);};const handleDragEnd=async event=>{const{active,over}=event;setActiveId(null);if(!over)return;const activeId=active.id;const overId=over.id;// Find the source column and lead\nlet sourceColumn=null;let sourceLead=null;for(const column of columns){const leadIndex=column.leads.findIndex(lead=>lead.id.toString()===activeId);if(leadIndex!==-1){sourceColumn=column;sourceLead=column.leads[leadIndex];break;}}if(!sourceColumn||!sourceLead)return;// Find the target column\nlet targetColumn=null;for(const column of columns){if(column.id===overId||column.leads.some(lead=>lead.id.toString()===overId)){targetColumn=column;break;}}if(!targetColumn||sourceColumn.id===targetColumn.id)return;// Determine new status based on target column\nlet newStatus=sourceLead.status;if(targetColumn.statuses.length>0){newStatus=targetColumn.statuses[0];}// Update the lead status in the backend\ntry{let updatedLead;// Use different API endpoints based on user role\nif(userRole==='qualifier'){// For qualifiers, use the qualify endpoint for any status change\nupdatedLead=await leadsAPI.qualifyLead(sourceLead.id,{status:newStatus});}else{// For other roles, use the regular update endpoint\nupdatedLead=await leadsAPI.updateLead(sourceLead.id,{status:newStatus});}// Update local state\nsetColumns(prevColumns=>{const newColumns=[...prevColumns];// Remove from source column\nconst sourceColIndex=newColumns.findIndex(col=>col.id===sourceColumn.id);newColumns[sourceColIndex]=_objectSpread(_objectSpread({},newColumns[sourceColIndex]),{},{leads:newColumns[sourceColIndex].leads.filter(lead=>{var _lead$id2;return((_lead$id2=lead.id)===null||_lead$id2===void 0?void 0:_lead$id2.toString())!==activeId;})});// Add to target column\nconst targetColIndex=newColumns.findIndex(col=>col.id===targetColumn.id);const leadToAdd=updatedLead||_objectSpread(_objectSpread({},sourceLead),{},{status:newStatus});newColumns[targetColIndex]=_objectSpread(_objectSpread({},newColumns[targetColIndex]),{},{leads:[...newColumns[targetColIndex].leads,leadToAdd]});return newColumns;});toast.success(\"Lead moved to \".concat(targetColumn.title));}catch(error){console.error('Failed to update lead status:',error);toast.error('Failed to update lead status');}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-64\",children:/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\",children:\"Lead Pipeline - Kanban Board\"}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchLeads,className:\"btn-margav-secondary\",children:\"Refresh\"})]}),/*#__PURE__*/_jsxs(DndContext,{sensors:sensors,collisionDetection:closestCenter,onDragStart:handleDragStart,onDragEnd:handleDragEnd,children:[/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto\",children:/*#__PURE__*/_jsx(\"div\",{className:\"flex space-x-3 min-w-max pb-4\",children:columns.map(column=>/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0 w-64 lg:w-72\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(column.color,\" rounded-lg p-4 h-full min-h-[500px]\"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-900 text-sm lg:text-base\",children:column.title}),/*#__PURE__*/_jsx(\"span\",{className:\"bg-white bg-opacity-50 text-gray-700 px-2 py-1 rounded-full text-xs font-medium\",children:column.leads.length})]}),/*#__PURE__*/_jsx(SortableContext,{items:column.leads.filter(lead=>lead&&typeof lead.id!=='undefined').map(lead=>lead.id.toString()),strategy:verticalListSortingStrategy,children:/*#__PURE__*/_jsx(\"div\",{className:\"space-y-2 max-h-[calc(100vh-400px)] overflow-y-auto\",children:column.leads.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"text-center py-6 text-gray-500\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-3xl mb-2\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-xs\",children:\"No leads\"})]}):column.leads.filter(lead=>lead&&typeof lead.id!=='undefined').map(lead=>/*#__PURE__*/_jsx(SortableLeadCard,{lead:lead,getStatusBadgeColor:getStatusBadgeColor,getStatusDisplayName:getStatusDisplayName,formatDate:formatDate},lead.id.toString()))})})]})},column.id))})}),/*#__PURE__*/_jsx(DragOverlay,{children:activeId?/*#__PURE__*/_jsx(\"div\",{className:\"bg-white rounded-lg p-4 shadow-lg border-2 border-green-500 opacity-90\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-sm font-medium text-gray-900\",children:(_columns$flatMap$find=columns.flatMap(col=>col.leads).find(lead=>lead.id.toString()===activeId))===null||_columns$flatMap$find===void 0?void 0:_columns$flatMap$find.full_name})}):null})]})]});};export default KanbanBoard;","map":{"version":3,"names":["React","useState","useEffect","leadsAPI","toast","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","SortableContext","sortableKeyboardCoordinates","verticalListSortingStrategy","useSortable","CSS","jsx","_jsx","jsxs","_jsxs","SortableLeadCard","_ref","_lead$id","lead","getStatusBadgeColor","getStatusDisplayName","formatDate","attributes","listeners","setNodeRef","transform","transition","isDragging","id","toString","console","warn","style","Transform","opacity","_objectSpread","ref","className","children","full_name","concat","status","phone","email","appointment_date","sale_amount","toLocaleString","notes","assigned_agent_name","assigned_agent_username","KanbanBoard","_ref2","_columns$flatMap$find","userRole","columns","setColumns","loading","setLoading","activeId","setActiveId","sensors","coordinateGetter","fetchLeads","response","getLeads","leads","results","columnDefinitions","title","statuses","color","populatedColumns","map","column","filter","includes","error","colors","names","dateString","Date","toLocaleDateString","month","day","hour","minute","handleDragStart","event","active","handleDragEnd","over","overId","sourceColumn","sourceLead","leadIndex","findIndex","targetColumn","some","newStatus","length","updatedLead","qualifyLead","updateLead","prevColumns","newColumns","sourceColIndex","col","_lead$id2","targetColIndex","leadToAdd","success","onClick","collisionDetection","onDragStart","onDragEnd","items","strategy","flatMap","find"],"sources":["/Users/elarh/Desktop/Margav Energy CRM/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Lead } from '../types';\nimport { leadsAPI } from '../api';\nimport { toast } from 'react-toastify';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n  DragOverlay,\n  DragStartEvent,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport {\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\ninterface KanbanBoardProps {\n  userRole: string;\n}\n\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  statuses: string[];\n  color: string;\n  leads: Lead[];\n}\n\ninterface SortableLeadCardProps {\n  lead: Lead;\n  getStatusBadgeColor: (status: string) => string;\n  getStatusDisplayName: (status: string) => string;\n  formatDate: (dateString: string) => string;\n}\n\nconst SortableLeadCard: React.FC<SortableLeadCardProps> = ({\n  lead,\n  getStatusBadgeColor,\n  getStatusDisplayName,\n  formatDate,\n}) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: lead?.id?.toString() || 'invalid' });\n\n  // Safety check for lead data\n  if (!lead || typeof lead.id === 'undefined') {\n    console.warn('SortableLeadCard received invalid lead data:', lead);\n    return null;\n  }\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className=\"bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-grab active:cursor-grabbing\"\n    >\n      <div className=\"flex items-start justify-between mb-2\">\n        <h4 className=\"font-medium text-gray-900 text-sm\">{lead.full_name}</h4>\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadgeColor(lead.status)}`}>\n          {getStatusDisplayName(lead.status)}\n        </span>\n      </div>\n      \n      <div className=\"space-y-1 text-xs text-gray-600\">\n        <p>📞 {lead.phone}</p>\n        {lead.email && <p>📧 {lead.email}</p>}\n        {lead.appointment_date && (\n          <p>📅 {formatDate(lead.appointment_date)}</p>\n        )}\n        {lead.sale_amount && (\n          <p className=\"font-semibold text-green-600\">💰 ${lead.sale_amount.toLocaleString()}</p>\n        )}\n      </div>\n      \n      {lead.notes && (\n        <p className=\"text-xs text-gray-500 mt-2 line-clamp-2\">{lead.notes}</p>\n      )}\n      \n      <div className=\"mt-2 text-xs text-gray-400\">\n        Assigned to: {lead.assigned_agent_name || lead.assigned_agent_username}\n      </div>\n    </div>\n  );\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ userRole }) => {\n  const [columns, setColumns] = useState<KanbanColumn[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  useEffect(() => {\n    fetchLeads();\n  }, [userRole]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchLeads = async () => {\n    try {\n      setLoading(true);\n      const response = await leadsAPI.getLeads();\n      const leads = response.results;\n      \n      // Define columns based on user role\n      let columnDefinitions: Omit<KanbanColumn, 'leads'>[] = [];\n      \n      if (userRole === 'admin') {\n        columnDefinitions = [\n          { id: 'cold_call', title: 'Cold Calls', statuses: ['cold_call'], color: 'bg-gray-100' },\n          { id: 'interested', title: 'Interested', statuses: ['sent_to_kelly'], color: 'bg-blue-100' },\n          { id: 'qualified', title: 'Qualified', statuses: ['qualified'], color: 'bg-green-100' },\n          { id: 'appointments', title: 'Appointments', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'completed', title: 'Completed', statuses: ['appointment_completed'], color: 'bg-yellow-100' },\n          { id: 'sales', title: 'Sales', statuses: ['sale_made', 'sale_lost'], color: 'bg-indigo-100' },\n        ];\n      } else if (userRole === 'agent') {\n        columnDefinitions = [\n          { id: 'cold_call', title: 'Cold Calls', statuses: ['cold_call'], color: 'bg-gray-100' },\n          { id: 'interested', title: 'Interested', statuses: ['interested'], color: 'bg-blue-100' },\n          { id: 'sent_to_kelly', title: 'Sent to Kelly', statuses: ['sent_to_kelly'], color: 'bg-green-100' },\n          { id: 'not_interested', title: 'Not Interested', statuses: ['not_interested', 'tenant', 'other_disposition'], color: 'bg-red-100' },\n        ];\n      } else if (userRole === 'qualifier') {\n        columnDefinitions = [\n          { id: 'sent_to_kelly', title: 'To Qualify', statuses: ['sent_to_kelly'], color: 'bg-blue-100' },\n          { id: 'qualified', title: 'Qualified', statuses: ['qualified'], color: 'bg-green-100' },\n          { id: 'appointments', title: 'Appointments Set', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'not_qualified', title: 'Not Qualified', statuses: ['not_interested', 'no_contact', 'blow_out', 'callback', 'pass_back_to_agent'], color: 'bg-red-100' },\n        ];\n      } else if (userRole === 'salesrep') {\n        columnDefinitions = [\n          { id: 'appointments', title: 'My Appointments', statuses: ['appointment_set'], color: 'bg-purple-100' },\n          { id: 'completed', title: 'Completed', statuses: ['appointment_completed'], color: 'bg-yellow-100' },\n          { id: 'sales', title: 'Sales Results', statuses: ['sale_made', 'sale_lost'], color: 'bg-indigo-100' },\n        ];\n      }\n\n      // Populate columns with leads\n      const populatedColumns = columnDefinitions.map(column => ({\n        ...column,\n        leads: leads.filter(lead => column.statuses.includes(lead.status))\n      }));\n\n      setColumns(populatedColumns);\n    } catch (error) {\n      console.error('Failed to fetch leads:', error);\n      toast.error('Failed to fetch leads');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    const colors: { [key: string]: string } = {\n      'cold_call': 'bg-gray-100 text-gray-800',\n      'interested': 'bg-blue-100 text-blue-800',\n      'sent_to_kelly': 'bg-green-100 text-green-800',\n      'qualified': 'bg-green-100 text-green-800',\n      'appointment_set': 'bg-purple-100 text-purple-800',\n      'appointment_completed': 'bg-yellow-100 text-yellow-800',\n      'sale_made': 'bg-green-100 text-green-800',\n      'sale_lost': 'bg-red-100 text-red-800',\n      'not_interested': 'bg-red-100 text-red-800',\n      'tenant': 'bg-orange-100 text-orange-800',\n      'other_disposition': 'bg-gray-100 text-gray-800',\n      'no_contact': 'bg-gray-100 text-gray-800',\n      'blow_out': 'bg-red-100 text-red-800',\n      'callback': 'bg-yellow-100 text-yellow-800',\n      'pass_back_to_agent': 'bg-blue-100 text-blue-800',\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusDisplayName = (status: string) => {\n    const names: { [key: string]: string } = {\n      'cold_call': 'Cold Call',\n      'interested': 'Interested',\n      'sent_to_kelly': 'Sent to Kelly',\n      'qualified': 'Qualified',\n      'appointment_set': 'Appointment Set',\n      'appointment_completed': 'Completed',\n      'sale_made': 'Sale Made',\n      'sale_lost': 'Sale Lost',\n      'not_interested': 'Not Interested',\n      'tenant': 'Tenant',\n      'other_disposition': 'Other',\n      'no_contact': 'No Contact',\n      'blow_out': 'Blow Out',\n      'callback': 'Call Back',\n      'pass_back_to_agent': 'Pass Back',\n    };\n    return names[status] || status;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const handleDragStart = (event: DragStartEvent) => {\n    setActiveId(event.active.id as string);\n  };\n\n  const handleDragEnd = async (event: DragEndEvent) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over) return;\n\n    const activeId = active.id as string;\n    const overId = over.id as string;\n\n    // Find the source column and lead\n    let sourceColumn: KanbanColumn | null = null;\n    let sourceLead: Lead | null = null;\n\n    for (const column of columns) {\n      const leadIndex = column.leads.findIndex(lead => lead.id.toString() === activeId);\n      if (leadIndex !== -1) {\n        sourceColumn = column;\n        sourceLead = column.leads[leadIndex];\n        break;\n      }\n    }\n\n    if (!sourceColumn || !sourceLead) return;\n\n    // Find the target column\n    let targetColumn: KanbanColumn | null = null;\n    for (const column of columns) {\n      if (column.id === overId || column.leads.some(lead => lead.id.toString() === overId)) {\n        targetColumn = column;\n        break;\n      }\n    }\n\n    if (!targetColumn || sourceColumn.id === targetColumn.id) return;\n\n    // Determine new status based on target column\n    let newStatus = sourceLead.status;\n    if (targetColumn.statuses.length > 0) {\n      newStatus = targetColumn.statuses[0] as Lead['status'];\n    }\n\n    // Update the lead status in the backend\n    try {\n      let updatedLead: Lead | undefined;\n      \n      // Use different API endpoints based on user role\n      if (userRole === 'qualifier') {\n        // For qualifiers, use the qualify endpoint for any status change\n        updatedLead = await leadsAPI.qualifyLead(sourceLead.id, { status: newStatus });\n      } else {\n        // For other roles, use the regular update endpoint\n        updatedLead = await leadsAPI.updateLead(sourceLead.id, { status: newStatus });\n      }\n      \n      // Update local state\n      setColumns(prevColumns => {\n        const newColumns = [...prevColumns];\n        \n        // Remove from source column\n        const sourceColIndex = newColumns.findIndex(col => col.id === sourceColumn!.id);\n        newColumns[sourceColIndex] = {\n          ...newColumns[sourceColIndex],\n          leads: newColumns[sourceColIndex].leads.filter(lead => lead.id?.toString() !== activeId)\n        };\n        \n        // Add to target column\n        const targetColIndex = newColumns.findIndex(col => col.id === targetColumn!.id);\n        const leadToAdd: Lead = updatedLead || { ...sourceLead!, status: newStatus };\n        newColumns[targetColIndex] = {\n          ...newColumns[targetColIndex],\n          leads: [...newColumns[targetColIndex].leads, leadToAdd]\n        };\n        \n        return newColumns;\n      });\n\n      toast.success(`Lead moved to ${targetColumn.title}`);\n    } catch (error) {\n      console.error('Failed to update lead status:', error);\n      toast.error('Failed to update lead status');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          Lead Pipeline - Kanban Board\n        </h2>\n        <button\n          onClick={fetchLeads}\n          className=\"btn-margav-secondary\"\n        >\n          Refresh\n        </button>\n      </div>\n\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <div className=\"overflow-x-auto\">\n          <div className=\"flex space-x-3 min-w-max pb-4\">\n            {columns.map((column) => (\n              <div key={column.id} className=\"flex-shrink-0 w-64 lg:w-72\">\n                <div className={`${column.color} rounded-lg p-4 h-full min-h-[500px]`}>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-gray-900 text-sm lg:text-base\">{column.title}</h3>\n                    <span className=\"bg-white bg-opacity-50 text-gray-700 px-2 py-1 rounded-full text-xs font-medium\">\n                      {column.leads.length}\n                    </span>\n                  </div>\n                  \n                  <SortableContext\n                    items={column.leads\n                      .filter(lead => lead && typeof lead.id !== 'undefined')\n                      .map(lead => lead.id.toString())}\n                    strategy={verticalListSortingStrategy}\n                  >\n                    <div className=\"space-y-2 max-h-[calc(100vh-400px)] overflow-y-auto\">\n                      {column.leads.length === 0 ? (\n                        <div className=\"text-center py-6 text-gray-500\">\n                          <div className=\"text-3xl mb-2\">📋</div>\n                          <p className=\"text-xs\">No leads</p>\n                        </div>\n                      ) : (\n                        column.leads\n                          .filter(lead => lead && typeof lead.id !== 'undefined')\n                          .map((lead) => (\n                            <SortableLeadCard\n                              key={lead.id.toString()}\n                              lead={lead}\n                              getStatusBadgeColor={getStatusBadgeColor}\n                              getStatusDisplayName={getStatusDisplayName}\n                              formatDate={formatDate}\n                            />\n                          ))\n                      )}\n                    </div>\n                  </SortableContext>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <DragOverlay>\n          {activeId ? (\n            <div className=\"bg-white rounded-lg p-4 shadow-lg border-2 border-green-500 opacity-90\">\n              <div className=\"text-sm font-medium text-gray-900\">\n                {columns.flatMap(col => col.leads).find(lead => lead.id.toString() === activeId)?.full_name}\n              </div>\n            </div>\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}